name: Continuous Integration and Delivery

on: [push]

env:
  WEB_IMAGE: docker.pkg.github.com/theportatcern/hackathon2020-pier84/web
  NGINX_IMAGE: docker.pkg.github.com/theportatcern/hackathon2020-pier84/nginx

jobs:

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
          SQL_USER: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PORT: ${{ secrets.SQL_PORT }}
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
        run: |
          echo DEBUG=0 >> .env
          echo SQL_ENGINE=django.db.backends.postgresql >> .env
          echo DATABASE=postgres >> .env
          echo SECRET_KEY="'$SECRET_KEY'" >> .env
          echo SQL_DATABASE="'$SQL_DATABASE'" >> .env
          echo SQL_USER="'$SQL_USER'" >> .env
          echo SQL_PASSWORD="'$SQL_PASSWORD'" >> .env
          echo SQL_HOST="'$SQL_HOST'" >> .env
          echo SQL_PORT="'$SQL_PORT'" >> .env
          echo DJANGO_ALLOWED_HOSTS="$DJANGO_ALLOWED_HOSTS" >> .env
      - name: Set environment variables
        run: |
          echo ::set-env name=WEB_IMAGE::${{ env.WEB_IMAGE }}
          echo ::set-env name=NGINX_IMAGE::${{ env.NGINX_IMAGE }}
      - name: Log in to GitHub Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQL_DATABASE: ${{ secrets.SQL_DATABASE }}
          SQL_USER: ${{ secrets.SQL_USER }}
          SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
          SQL_HOST: ${{ secrets.SQL_HOST }}
          SQL_PORT: ${{ secrets.SQL_PORT }}
          DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
          LOGIN_NAME: ${{ secrets.LOGIN_NAME }}
        run: |
          echo DEBUG=0 >> .env
          echo SQL_ENGINE=django.db.backends.postgresql >> .env
          echo DATABASE=postgres >> .env
          echo SECRET_KEY="'$SECRET_KEY'" >> .env
          echo SQL_DATABASE="$SQL_DATABASE" >> .env
          echo SQL_USER="$SQL_USER" >> .env
          echo SQL_PASSWORD="$SQL_PASSWORD" >> .env
          echo SQL_HOST="$SQL_HOST" >> .env
          echo SQL_PORT="$SQL_PORT" >> .env
          echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env
          echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
          echo DJANGO_ALLOWED_HOSTS="$DJANGO_ALLOWED_HOSTS" >> .env
          echo LOGIN_NAME="$LOGIN_NAME" >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "$PRIVATE_KEY"
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ${{ secrets.LOGIN_NAME }}@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/root/humanitarian_feedback
          ssh -o StrictHostKeyChecking=no ${{ secrets.LOGIN_NAME }}@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd /root/humanitarian_feedback
            source .env
            echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
            docker pull $WEB_IMAGE
            docker pull $NGINX_IMAGE
            docker-compose -f docker-compose.prod.yml up -d
          ENDSSH
